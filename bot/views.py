from django.http import HttpResponse
from django.shortcuts import render
import json
import telegram
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton,WebAppInfo
group_id=-4587708639
user_states = {}
bot = telegram.Bot("7677882278:AAHiw2W0wxkrBZmJEj12DwQryxgR3qucWZ4")
@csrf_exempt
@require_POST
def webhook(request):
    if request.method == 'POST':
        json_data = json.loads(request.body.decode('utf-8'))
        if 'message' in json_data:
            process_message(json_data)
        elif 'callback_query' in json_data:
            process_callback_query(json_data)

        return HttpResponse(status=200)
    else:
        return HttpResponse(status=405)

inline_keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data='sell'),
             InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∫–∞", callback_data='buy')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='posts')],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='category')],
            [InlineKeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
            [InlineKeyboardButton("üì¢ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data='ads')],
        ]
inline_markup = InlineKeyboardMarkup(inline_keyboard)
def process_message(json_data):
    chat_id = json_data['message']['chat']['id']
    message_text = json_data['message'].get('text', "")
    chat_username = json_data['message']['chat'].get('username', 'username')

    if 'reply_to_message' in json_data['message']:
        reply_chat_id = json_data['message']['reply_to_message']['chat'].get('id', None)
        reply_message=json_data['message']['reply_to_message']['text']
        #from_chat=json_data['message']['from']['id']
        if reply_chat_id == group_id:

            user_id = re.search(r'id:(\d+)', reply_message).group(1)
            end = [[InlineKeyboardButton("‚ùå–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data='nazad')]]
            end_markup = InlineKeyboardMarkup(end)
            bot.send_message(user_id,text=f'–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message_text}', reply_markup=end_markup)

    # Check if the user is in "ads" state
    if user_states.get(chat_id) == 'awaiting_ad_text':

        user_states.pop(chat_id)
        ads = (f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã! –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã: {message_text} "
               f"üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{chat_username} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
        bot.send_message(group_id, text=ads)
        bot.send_message(chat_id, text="‚úÖ –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    elif user_states.get(chat_id) == 'awaiting_support_text':

        user_states.pop(chat_id)
        support = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{chat_username} id:{chat_id} –Ω–∞–ø–∏—Å–∞–ª: {message_text}"
        #support = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{chat_username} id:{chat_id}  –Ω–∞–ø–∏—Å–∞–ª: {message_text}"


        bot.send_message(group_id, text=support)

    else:

        if message_text == '/start':
            text = (f"‚ú® –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ "
                    f"–æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ @ITbarakholka. üöÄ –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è, @{chat_username}!")
            bot.send_message(chat_id, text, reply_markup=inline_markup)

def process_callback_query(json_data):
    query = json_data['callback_query']
    chat_id = query['message']['chat']['id']
    callback_data_message = query['data']
    nazad_key = [[InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='nazad')]]
    nazad_markup = InlineKeyboardMarkup(nazad_key)

    if callback_data_message == "ads":
        bot.send_message(
            chat_id,
            text="üì¢ –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏ –≤ –±–æ—Ç–µ! "
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!",
            reply_markup=nazad_markup
        )
        # Set user state to "awaiting_ad_text"
        user_states[chat_id] = 'awaiting_ad_text'


    elif callback_data_message == "support":
        bot.send_message(chat_id,text="üí¨ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",reply_markup=nazad_markup)
        user_states[chat_id] = 'awaiting_support_text'

    elif callback_data_message == "nazad":
        # Return to the main menu
        bot.send_message(chat_id, text="–ú–µ–Ω—é:", reply_markup=inline_markup)

def index(request):
    return HttpResponse("Hello, World!")

