from django.http import HttpResponse
from django.shortcuts import render
import json
import telegram
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import re

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton,WebAppInfo
group_id=-4587708639
user_states = {}
bot = telegram.Bot("7677882278:AAHiw2W0wxkrBZmJEj12DwQryxgR3qucWZ4")
@csrf_exempt
@require_POST
def webhook(request):
    if request.method == 'POST':
        json_data = json.loads(request.body.decode('utf-8'))
        if 'message' in json_data:
            process_message(json_data)
        elif 'callback_query' in json_data:
            process_callback_query(json_data)

        return HttpResponse(status=200)
    else:
        return HttpResponse(status=405)

inline_keyboard = [
            [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data='sell'),
             InlineKeyboardButton("üõí –ü–æ–∫—É–ø–∫–∞", callback_data='buy')],
            [InlineKeyboardButton("üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data='posts')],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='category')],
            [InlineKeyboardButton("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
            [InlineKeyboardButton("üì¢ –ö—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É", callback_data='ads')],
        ]
inline_markup = InlineKeyboardMarkup(inline_keyboard)

sell_skip = [
    [InlineKeyboardButton("üíª–ü–ö", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üñ•Ô∏è–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üõ†Ô∏è–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üñß–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üåê–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üñ®Ô∏è–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üì±–¢–µ–ª–µ—Ñ–æ–Ω—ã", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üíø–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ", callback_data='sell_skip_skip')],
    [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='sell')],

]
sell_skip_markup = InlineKeyboardMarkup(sell_skip)
sell_skip_pod = [
    [InlineKeyboardButton("üñ•Ô∏è–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ü–ö", callback_data='sell_skip')],
    [InlineKeyboardButton("üíª–ù–æ—É—Ç–±—É–∫–∏", callback_data='sell_skip')],
    [InlineKeyboardButton("üñ®Ô∏è–ú–æ–Ω–æ–±–ª–æ–∫–∏", callback_data='sell_skip')],
    [InlineKeyboardButton("üì±–ü–ª–∞–Ω—à–µ—Ç—ã", callback_data='sell_skip')],
    [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='sell_skip')],
]
sell_skip_pod_markup = InlineKeyboardMarkup(sell_skip_pod)
text_category="üîç–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞."

text_sell="üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –ù–µ –±–æ–ª–µ–µ 10 —à—Ç—É–∫."
sell = [[InlineKeyboardButton("‚û°Ô∏è–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='sell_skip')],
        [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='nazad')]]
sell_markup = InlineKeyboardMarkup(sell)
saved_photo = None
skip_catergory=None
skip_pod_category=None
skip_pod_pod_category=None

def process_message(json_data):
    global saved_photo
    chat_id = json_data['message']['chat']['id']
    message_text = json_data['message'].get('text', "")
    chat_username = json_data['message']['chat'].get('username', 'username')

    if 'reply_to_message' in json_data['message']:
        reply_chat_id = json_data['message']['reply_to_message']['chat'].get('id', None)
        reply_message=json_data['message']['reply_to_message']['text']

        if reply_chat_id == group_id:

            user_id = re.search(r'id:(\d+)', reply_message).group(1)
            end = [[InlineKeyboardButton("‚ùå–ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data='nazad')]]
            end_markup = InlineKeyboardMarkup(end)
            bot.send_message(user_id,text=f'–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message_text}', reply_markup=end_markup)

    # Check if the user is in "ads" state
    if user_states.get(chat_id) == 'awaiting_ad_text':

        user_states.pop(chat_id)
        ads = (f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã! –¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã: {message_text} "
               f"üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{chat_username} –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
        bot.send_message(group_id, text=ads)
        bot.send_message(chat_id, text="‚úÖ –í–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.")

    elif user_states.get(chat_id) == 'awaiting_support_text':

        user_states.pop(chat_id)
        support = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{chat_username} id:{chat_id} –Ω–∞–ø–∏—Å–∞–ª: {message_text}"

        bot.send_message(group_id, text=support)

    elif user_states.get(chat_id) == "awaiting_photo":
        if 'photo' in json_data['message']:
            photo = json_data['message']['photo'][-1]  # Get the highest resolution
            saved_photo = photo['file_id']

            bot.send_message(
                chat_id,
                text=text_category,
                reply_markup=sell_skip_markup
            )




    else:

        if message_text == '/start':
            text = (f"‚ú® –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ "
                    f"–æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª–µ @ITbarakholka. üöÄ –†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è, @{chat_username}!")
            bot.send_message(chat_id, text, reply_markup=inline_markup)

user_selected_category = {}
def generate_category_keyboard(chat_id):
    categories = [
        ("–ü–ö", 'pc'),
        ("–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", 'pc_comp'),
        ("–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞", 'pc_comp1'),
        ("–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", 'pc_network'),
        ("–û—Ñ–∏—Å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", 'pc_office'),
        ("–¢–µ–ª–µ—Ñ–æ–Ω—ã", 'pc_phone'),
        ("–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ", 'pf_software'),
    ]

    continue_key = []

    # Loop through all categories and mark the selected category with ‚úÖ
    for category_name, callback_value in categories:
        # If the category is selected, add a ‚úÖ next to it
        if user_selected_category.get(chat_id) == callback_value:
            category_button = InlineKeyboardButton(f"‚úÖ {category_name}", callback_data=callback_value)
        else:
            category_button = InlineKeyboardButton(category_name, callback_data=callback_value)

        continue_key.append([category_button])

    # Add buttons for "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "–ò—Å–∫–∞—Ç—å", and "–ù–∞–∑–∞–¥"
    continue_key.extend([
        [InlineKeyboardButton("‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='pc_continue')],
        [InlineKeyboardButton("üîç–ò—Å–∫–∞—Ç—å", callback_data='pc_search')],
        [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='nazad')],
    ])

    return InlineKeyboardMarkup(continue_key)


def process_callback_query(json_data):
    query = json_data['callback_query']
    chat_id = query['message']['chat']['id']
    message_id=query['message']['message_id']

    callback_data_message = query['data']
    nazad_key = [[InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='nazad')]]
    nazad_markup = InlineKeyboardMarkup(nazad_key)


    if callback_data_message == "ads":
        bot.send_message(
            chat_id,
            text="üì¢ –í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ –∏ –≤ –±–æ—Ç–µ! "
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!",
            reply_markup=nazad_markup
        )

        user_states[chat_id] = 'awaiting_ad_text'


    elif callback_data_message == "support":
        bot.send_message(chat_id,text="üí¨ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",reply_markup=nazad_markup)
        user_states[chat_id] = 'awaiting_support_text'

    elif callback_data_message == "nazad":

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="–ú–µ–Ω—é:"  # Update the message text
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=query['message']['message_id'],
            reply_markup=inline_markup
        )

    elif callback_data_message == "pc_continue":

        pc_continue = [
            [InlineKeyboardButton("–°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–µ –ü–ö", callback_data='pc_desktop')],
            [InlineKeyboardButton("–ù–æ—É—Ç–±—É–∫–∏", callback_data='pc_laptop')],
            [InlineKeyboardButton("–ú–æ–Ω–æ–±–ª–æ–∫–∏", callback_data='pc_desktop')],
            [InlineKeyboardButton("–ü–ª–∞–Ω—à–µ—Ç—ã", callback_data='pc_monoblock')],
            [InlineKeyboardButton("‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='pc_post')],
            [InlineKeyboardButton("üîç–ò—Å–∫–∞—Ç—å", callback_data='pc_search')],
            [InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data='category')],

        ]
        pc_continue_markup = InlineKeyboardMarkup(pc_continue)

        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, –æ—Ç–º–µ—á–∞—è –µ—ë –≥–∞–ª–æ—á–∫–æ–π ‚úÖ. –ò–ª–∏ –∂–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å ¬´‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ."
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=query['message']['message_id'],
            reply_markup=pc_continue_markup
        )




    elif callback_data_message == "category":
        text="üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –æ—Ç–º–µ—Ç–∏–≤ –∏—Ö –∫–Ω–æ–ø–∫–æ–π ‚úÖ   –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª."
        continue_markup = generate_category_keyboard(chat_id)

        # Edit the message with updated text and keyboard
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=continue_markup
        )
    elif callback_data_message == 'sell':


        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text_sell
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=sell_markup
        )
        user_states[chat_id] = 'awaiting_photo'

    elif callback_data_message == 'sell_skip':
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text_category
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=sell_skip_markup
        )
    elif callback_data_message == 'sell_skip_skip':
        bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text="üîç–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞"
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=sell_skip_pod_markup
        )










def index(request):
    return HttpResponse("Hello, World!")

